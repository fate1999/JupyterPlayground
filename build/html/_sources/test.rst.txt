.. code:: ipython3

    import torch
    
    # test

.. code:: ipython3

    print(torch.cuda.is_available())


.. parsed-literal::

    False


.. code:: ipython3

    x = torch.tensor([1,2,3], device="cpu")
    print(x.device)


.. parsed-literal::

    cpu


.. code:: ipython3

    x




.. parsed-literal::

    tensor([1, 2, 3])



.. code:: ipython3

    print("Using torch", torch.__version__)


.. parsed-literal::

    Using torch 1.12.1


.. code:: ipython3

    print(torch.cuda.device_count())


.. parsed-literal::

    0


.. code:: ipython3

    # print(torch.cuda.get_device_name(0))

Real Test

.. code:: ipython3

    import numpy as np
    x_values = [i for i in range(11)]
    x_train = np.array(x_values, dtype = np.float32)
    x_train = x_train.reshape(-1,1)
    x_train.shape




.. parsed-literal::

    (11, 1)



.. code:: ipython3

    y_values = [2*i + 1 for i in x_values]
    y_train = np.array(y_values, dtype=np.float32)
    y_train = y_train.reshape(-1, 1)
    y_train.shape




.. parsed-literal::

    (11, 1)



.. code:: ipython3

    import torch.nn as nn

.. code:: ipython3

    class LinearRegressionModel(nn.Module):
        def __init__(self, input_dim, output_dim):
            super(LinearRegressionModel, self).__init__()
            self.linear = nn.Linear(input_dim, output_dim)
    
        def forward(self, x):
            out = self.linear(x)
            return out

.. code:: ipython3

    input_dim = 1
    output_dim = 1
    model = LinearRegressionModel(input_dim, output_dim)

Send to cuda

.. code:: ipython3

    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model.to(device)




.. parsed-literal::

    LinearRegressionModel(
      (linear): Linear(in_features=1, out_features=1, bias=True)
    )



.. code:: ipython3

    epochs = 1000
    learning_rate = 0.01
    optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)
    criterion = nn.MSELoss()

.. code:: ipython3

    for epoch in range(epochs):
        epoch += 1
    
        # .to(device) send to cuda
        inputs = torch.from_numpy(x_train).to(device)
        labels = torch.from_numpy(y_train).to(device)
    
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
    
        loss.backward()
        optimizer.step()
        if epoch % 50 == 0:
            print('epoch {}, loss {}'.format(epoch, loss.item()))


.. parsed-literal::

    epoch 50, loss 0.17682790756225586
    epoch 100, loss 0.10085618495941162
    epoch 150, loss 0.05752459540963173
    epoch 200, loss 0.032809916883707047
    epoch 250, loss 0.018713610246777534
    epoch 300, loss 0.010673540644347668
    epoch 350, loss 0.00608776556327939
    epoch 400, loss 0.0034722036216408014
    epoch 450, loss 0.001980450004339218
    epoch 500, loss 0.0011295727454125881
    epoch 550, loss 0.0006442761514335871
    epoch 600, loss 0.0003674711915664375
    epoch 650, loss 0.00020958857203368098
    epoch 700, loss 0.00011953873763559386
    epoch 750, loss 6.818243127781898e-05
    epoch 800, loss 3.8888087146915495e-05
    epoch 850, loss 2.2180902305990458e-05
    epoch 900, loss 1.2651923498196993e-05
    epoch 950, loss 7.216022368083941e-06
    epoch 1000, loss 4.115655883651925e-06


.. code:: ipython3

    # predicted = model(torch.from_numpy(x_train).requires_grad_()).data.numpy()
    # predicted

.. code:: ipython3

    torch.save(model.state_dict(), 'model.pkl')

.. code:: ipython3

    model.load_state_dict(torch.load('model.pkl'))




.. parsed-literal::

    <All keys matched successfully>


